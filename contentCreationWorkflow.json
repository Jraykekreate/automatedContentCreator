{
  "name": "contentCreationWorkflow",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "Fetch the latest trending memes and football/sports news from the feeds. Based only on verified facts, generate 5 short content ideas that are:\n\n* Catchy and viral-ready for TikTok, Instagram, X, or YouTube Shorts\n* Relatable and tied to current meme formats or viral trends\n* 100% factual (no speculation beyond the feeds)\n* Snappy one-liners or captions (1–2 sentences)\n* Suitable for visual meme templates or quick image/video generation\n\nOutput 3 ideas as a numbered list.\nOnly use popular memes or well known memes in the ideas ",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a content strategist AI. Your task is to fetch the latest trending memes and football/sports news from the feeds. Based strictly on verified facts, you must generate 5 short content ideas that are: catchy, viral-ready, relatable to current meme formats, and 100% factual. The memes should be based on a template of memes that actually exist. Each idea should be a snappy one-liner or caption (1–2 sentences) and suitable for visual meme templates or quick image/video generation. Always output exactly 5 ideas as a numbered list.\n"
        }
      },
      "id": "efa9fb9f-4b20-4e0f-a0cb-af33132556b8",
      "name": "1. Generate Trendy Idea",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1792,
        176
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-120b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1040,
        512
      ],
      "id": "359f95fe-6208-4e15-9aeb-04c5e0ed2735",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "vR0K89RNP8PChnFU",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        448,
        224
      ],
      "id": "20b3b703-d886-48f2-b993-789424d99953",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "toolDescription": "An HTTP endpoint that retrieves the most relevant football-related posts from Reddit to provide the LLM with context on current events in football.\n",
        "method": "POST",
        "url": "http://host.docker.internal:9000/reddit",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "subreddit",
              "value": "=soccer"
            },
            {
              "name": "days",
              "value": "1"
            },
            {
              "name": "top",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1840,
        1040
      ],
      "id": "90008b9d-bb51-4d6a-a2aa-23918048835f",
      "name": "reddit Node"
    },
    {
      "parameters": {
        "toolDescription": "An HTTP endpoint that retrieves the most relevant football-related news from Telegram to provide the LLM with context on current news in football. It takes its data from sky sports football news\n",
        "method": "POST",
        "url": "http://host.docker.internal:9000/telegram",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "channel",
              "value": "Sky_sports_football_updates"
            },
            {
              "name": "days",
              "value": "1"
            },
            {
              "name": "top",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1664,
        880
      ],
      "id": "76119107-846a-487c-8da7-e92977b77442",
      "name": "Sky sports Node"
    },
    {
      "parameters": {
        "toolDescription": "An HTTP Endpoint to get football banter and memes from telegram from the official troll football account useful in creating football jokes or funny football content",
        "method": "POST",
        "url": "http://host.docker.internal:9000/telegram",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "channel",
              "value": "troll_football_telegram"
            },
            {
              "name": "days",
              "value": "1"
            },
            {
              "name": "top",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1408,
        832
      ],
      "id": "67c6624a-f8ad-41bc-9993-8ee7bb48bccd",
      "name": "Troll Football NOde"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "={\n  \"1\": \"idea_text_1\",\n  \"2\": \"idea_text_2\",\n  \"3\": \"idea_text_3\",\n  \"4\": \"idea_text_4\",\n  \"5\": \"idea_text_5\"\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1968,
        512
      ],
      "id": "6d3f2244-515c-46b6-905f-0801933a5443",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-20b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2144,
        1440
      ],
      "id": "5bc33fbb-788c-4511-b2de-22770ad2f226",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "vR0K89RNP8PChnFU",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "This tool provides data on any football match.\n\n* It is used for retrieving information about a specific game or overall match statistics.\n* It must only be called when the input is a football match title written entirely in lowercase (e.g., `chelsea vs brighton`).\n* Do not call the tool for any other type of input.\n",
        "url": "http://host.docker.internal:9000/football/match/",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1200,
        752
      ],
      "id": "b2068b85-03e5-4be2-b72d-c178dd5ab5bf",
      "name": "Football Match Node"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:9000/images",
        "sendBody": true,
        "contentType": "=json",
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.output.query }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3776,
        560
      ],
      "id": "2d5f5f07-3d79-4ce6-ae4d-231049d012e1",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-120b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3184,
        816
      ],
      "id": "895ee568-78d2-4efe-b47b-efb8fc88c91a",
      "name": "Groq Chat Model3",
      "credentials": {
        "groqApi": {
          "id": "vR0K89RNP8PChnFU",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"query\":\"individual\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        3456,
        848
      ],
      "id": "0da994f3-ca07-4459-808d-bde9677dee91",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-scout-17b-16e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3632,
        1232
      ],
      "id": "88469c8f-a416-4de8-8ffc-051cfe8937e6",
      "name": "Groq Chat Model4",
      "credentials": {
        "groqApi": {
          "id": "vR0K89RNP8PChnFU",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "YOUR_CHAT_ID_HERE",
        "binaryData": true,
        "additionalFields": {}
      },
      "id": "df62b3ed-d2a1-4e0b-ae82-96406a41a742",
      "name": "Send Processed Photo",
      "type": "n8n-nodes-base.telegram",
      "position": [
        8864,
        1152
      ],
      "typeVersion": 1.2,
      "webhookId": "a15315e0-533e-4e2a-b683-30792032263a"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "3de9a117-0adb-4d3d-8f2d-4ff78fd06118",
      "name": "Convert Photo to Base",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        7808,
        1152
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst updatedItems = items.map((item) => {\n  const base64Url = item?.json?.data;\n  const url = `data:image/png;base64,${base64Url}`;\n  return { url };\n});\nreturn updatedItems;\n"
      },
      "id": "f843279b-c47f-4ce6-bddf-e2806f9f4e3a",
      "name": "Format Image Data URL1",
      "type": "n8n-nodes-base.code",
      "position": [
        8016,
        1152
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3782b286-b6fd-4943-8530-ff922944b803",
              "name": "base",
              "type": "string",
              "value": "={{ $json.choices[0].message.images[0].image_url.url.split(',')[1] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "48cb9983-008d-4e67-a19f-5b80cd134a8b",
      "name": "Parse AI Response Data1",
      "type": "n8n-nodes-base.set",
      "position": [
        8416,
        1152
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base",
        "options": {}
      },
      "id": "1741fe16-2b3d-4734-8847-699ae587df97",
      "name": "Base64 to Binary File1",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        8640,
        1152
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openRouterApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer $OPENROUTER_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "=",
        "options": {}
      },
      "id": "edef46b0-e1c0-441f-917f-62629d560bb5",
      "name": "Nano Banana Image Processor1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        8208,
        1152
      ],
      "typeVersion": 4.2,
      "credentials": {
        "openRouterApi": {
          "id": "CX9TfAf3MtY8ymlA",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        4816,
        320
      ],
      "id": "13b13589-d564-4120-8598-65338dcf9881",
      "name": "Merge"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=your output should be a simple concise and non-descriptive name of the person in the spotlight. {{ $json.text }}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3408,
        640
      ],
      "id": "fe791d40-6d94-41c0-8ec0-246371c418ca",
      "name": "Agent To Get Image"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\n\n// collect text objects (single numeric key) and sort\nconst texts = input\n  .filter(item => {\n    const keys = Object.keys(item.json);\n    return keys.length === 1 && /^\\d+$/.test(keys[0]);\n  })\n  .sort((a, b) => Number(Object.keys(a.json)[0]) - Number(Object.keys(b.json)[0]));\n\n// collect getty image objects (keep original order) and treat \"undefined\"/empty as missing\nconst gettyImages = input\n  .map(item => item.json)\n  .filter(j => {\n    const q = j.gettyQuery;\n    const u = j.gettyImageUrl;\n    return (q && q !== 'undefined' && q !== '') || (u && u !== 'undefined' && u !== '');\n  });\n\n// collect meme image objects (treat \"undefined\"/empty as missing)\nconst memeImages = input\n  .map(item => item.json)\n  .filter(j => {\n    const q = j.memeQuery;\n    const u = j.memeImageUrl;\n    return q && q !== 'undefined' && q !== '' && u && u !== 'undefined' && u !== '';\n  });\n\n// Build output only for each text (no extra image-only objects).\n// Omit any grouped object that contains any null/undefined value.\nconst output = texts.map((textItem, i) => {\n  const textKey = Object.keys(textItem.json)[0];\n  const idea = textItem.json[textKey];\n\n  const g = gettyImages[i] || {};\n  const m = memeImages[i] || {};\n\n  return {\n    id: Number(textKey),\n    memeIdea: idea ?? null,\n    gettyQuery: g.gettyQuery ?? null,\n    gettyImageUrl: g.gettyImageUrl ?? null,\n    memeQuery: m.memeQuery ?? null,\n    memeImageUrl: m.memeImageUrl ?? null\n  };\n}).filter(obj => {\n  // keep only objects where no field is null or undefined\n  return Object.values(obj).every(v => v !== null && v !== undefined);\n});\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5040,
        448
      ],
      "id": "abde6518-2a2f-4aac-ab64-27fb751a3e89",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:9000/generateImage/",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=Edit the provided meme template with the specified character. Adapt it to fit the idea: `{{ $json.memeIdea }}`, ensuring the humor and style match the meme format and the character feels naturally integrated.\n"
            },
            {
              "name": "promptImageUrl",
              "value": "={{ $json.memeImageUrl }}"
            },
            {
              "name": "image_url",
              "value": "={{ $json.memeImageUrl }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5680,
        448
      ],
      "id": "f6a23fb4-094d-41ea-a04d-88cb30c9b53f",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Produce a single, lowercase web search query (2–4 words) that locates a popular meme template. Example: `drake yes no meme`. **DO NOT** add explanations, punctuation, code fences, examples beyond the one shown, extra words, or unrelated text. Only output the query. {{ $json.text }}\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3600,
        -48
      ],
      "id": "2ddb3290-e1bb-4ab4-ab18-6bb894abcca8",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-120b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        3392,
        240
      ],
      "id": "31e727d9-3d40-47c0-8b68-d6f36eb00399",
      "name": "Groq Chat Model2",
      "credentials": {
        "groqApi": {
          "id": "vR0K89RNP8PChnFU",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:9000/grabMeme/",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.output }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4096,
        -16
      ],
      "id": "77430f5d-3b36-41ef-9140-db902c398be8",
      "name": "Find Meme",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3024,
        336
      ],
      "id": "52f79f01-04f2-4963-99b7-9b748604bc33",
      "name": "Split Out"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "139f731d-735f-4a2b-81ae-4f9b1d257e68",
              "name": "list",
              "value": "={{ $json.list }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2784,
        384
      ],
      "id": "75bbca0f-376c-4f9f-b5eb-bec6d54ea6cd",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  // Accept the common places the data might live\n  const rawOutput = item.output ?? item.json?.output ?? item.json?.output_text ?? \"\";\n\n  // Normalize to a single string for parsing\n  const text = Array.isArray(rawOutput) ? rawOutput.join(\"\\n\") : String(rawOutput || \"\");\n\n  // Regex: capture blocks that start with a number (1. or 1) ) and grab everything until the next numbered item or EOF\n  const regex = /(\\d+)[\\.\\)]\\s*([\\s\\S]*?)(?=(?:\\n\\s*\\d+[\\.\\)]\\s)|$)/gs;\n\n  let finalList = [];\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    const number = match[1];\n    const content = match[2].trim().replace(/\\s+/g, \" \"); // collapse internal whitespace\n    finalList.push({ [number]: content });\n  }\n\n  // Fallback: if nothing matched, try line-by-line \"N. text\" or keep whole output as item \"1\"\n  if (finalList.length === 0) {\n    const lineRegex = /^\\s*(\\d+)[\\.\\)]\\s*(.+)$/;\n    const lines = text.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);\n    for (const l of lines) {\n      const m = l.match(lineRegex);\n      if (m) finalList.push({ [m[1]]: m[2].trim() });\n    }\n    if (finalList.length === 0 && text.trim()) {\n      finalList = [{ \"1\": text.trim() }];\n    }\n  }\n\n  // Replace the item's JSON with the wrapped list\n  item.json = { list: finalList };\n}\n\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2432,
        368
      ],
      "id": "e725daf0-b097-45c0-bf2d-256ff4a0cf23",
      "name": "FilterIdeas"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"gettyQuery\": \"{{ $json.query }}\",\n  \"gettyImageUrl\": \"{{ $json.image_url }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3984,
        560
      ],
      "id": "1751b2a1-e7de-4369-abdb-ebc01317a15e",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"memeQuery\": \"{{ $json.query }}\",\n  \"memeImageUrl\": \"{{ $json.image_url }}\"\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4416,
        96
      ],
      "id": "3f82f29b-5ba5-4f3c-b292-be7d080f81d7",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and replace numbered key with \"text\"\nfor (const item of $input.all()) {\n  const keys = Object.keys(item.json);\n  if (keys.length > 0) {\n    const oldKey = keys[0]; // \"1\", \"2\", etc.\n    const value = item.json[oldKey];\n    \n    // Remove the old key and replace with \"text\"\n    item.json = { text: value };\n  }\n}\n\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3232,
        96
      ],
      "id": "2bf411bb-5507-469d-99ae-96f89b5bebd0",
      "name": "Remap Keys"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and replace numbered key with \"text\"\nfor (const item of $input.all()) {\n  const keys = Object.keys(item.json);\n  if (keys.length > 0) {\n    const oldKey = keys[0]; // \"1\", \"2\", etc.\n    const value = item.json[oldKey];\n    \n    // Remove the old key and replace with \"text\"\n    item.json = { text: value };\n  }\n}\n\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3184,
        624
      ],
      "id": "5c3e6c6b-36df-4837-8f71-c751195dbf82",
      "name": "Rename Key"
    }
  ],
  "pinData": {},
  "connections": {
    "1. Generate Trendy Idea": {
      "main": [
        [
          {
            "node": "FilterIdeas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "1. Generate Trendy Idea",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "1. Generate Trendy Idea",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reddit Node": {
      "ai_tool": [
        [
          {
            "node": "1. Generate Trendy Idea",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Sky sports Node": {
      "ai_tool": [
        [
          {
            "node": "1. Generate Trendy Idea",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Troll Football NOde": {
      "ai_tool": [
        [
          {
            "node": "1. Generate Trendy Idea",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "1. Generate Trendy Idea",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Football Match Node": {
      "ai_tool": [
        [
          {
            "node": "1. Generate Trendy Idea",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Agent To Get Image",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Agent To Get Image",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert Photo to Base": {
      "main": [
        [
          {
            "node": "Format Image Data URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Image Data URL1": {
      "main": [
        [
          {
            "node": "Nano Banana Image Processor1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Response Data1": {
      "main": [
        [
          {
            "node": "Base64 to Binary File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Base64 to Binary File1": {
      "main": [
        [
          {
            "node": "Send Processed Photo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Nano Banana Image Processor1": {
      "main": [
        [
          {
            "node": "Parse AI Response Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent To Get Image": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        []
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Find Meme",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Find Meme": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Rename Key",
            "type": "main",
            "index": 0
          },
          {
            "node": "Remap Keys",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FilterIdeas": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Remap Keys": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rename Key": {
      "main": [
        [
          {
            "node": "Agent To Get Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9279af49-512c-4f19-bd4d-4fc890fb4920",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "89e07edb95cfabc4c8455c3dae8096d33235f8c36e9c50bdd2375b0c16526e91"
  },
  "id": "HFCLuKeefnU84tYJ",
  "tags": []
}